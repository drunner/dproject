#!/bin/bash
                                                                                                                                                          
#  ad88888ba                                        88                          88888888ba                                                                  
# d8"     "8b                                       ""                          88      "8b                                                                 
# Y8,                                                                           88      ,8P                                                                 
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          



#------------------------------------------------------------------------------------
# Initialisation of globals.

# bail if we try and use an unset var
set -o nounset

# Determine the current directory. There's stuff in there we want.
MYDIR=$( dirname "$(readlink -f "$0")" )

# read shell includes autogenerated by dRunner for us (it makes them when we're installed).
source "$MYDIR/variables.sh"
source "$MYDIR/utils.sh"

# Determine dRunner environment for logging options
if [ "${DRUNNER_ENVIRONMENT:-}" == "live" ]; then
   container_running "logstash" || die "No Logstash container running, please start logstash to enable logging"
   LOGGINGOPTS=("--log-driver=gelf" "--log-opt" "gelf-address=udp://127.0.0.1:12201")
else
   LOGGINGOPTS=("--log-driver=json-file")
fi

#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2
NAME
   ${SERVICENAME}
       
SYNOPSIS
   ${CODE_S}${SERVICENAME} help${CODE_E}
      This help.
   
DESCRIPTION
   Helpers for <<PROJECT_NAME>>. Built from ${IMAGENAME}.
   
EOF
}

#------------------------------------------------------------------------------------
# Run a command in a temporary container. 
# Add "${DOCKEROPTS[@]}" after "${HOSTNAME}" if you are using servicecfg.sh

function dockerrun {
   local RVAL=0
   docker run "${COMMANDOPTS[@]}" "${LOGGINGOPTS[@]}" --name="${SERVICENAME}-${COMMAND}" -h "${HOSTNAME}" "${IMAGENAME}" "$@"
   RVAL=$?
   docker rm "${SERVICENAME}-${COMMAND}" >/dev/null
   [ $RVAL -eq 0 ] || die "${SERVICENAME} ${COMMAND} failed."
}

#------------------------------------------------------------------------------------
# Run a command in the container.

function dockerexec {
   docker exec "${COMMANDOPTS[@]}" ${SERVICENAME} "$@"
   [ $? -eq 0 ] || die "${SERVICENAME} ${COMMAND} failed."
}

#------------------------------------------------------------------------------------
# Run a detached command in the container. 

# detached, can't remove.
function serviceStart {
   docker run -d "${LOGGINGOPTS[@]}" "--restart=always" \
		--name="${SERVICENAME}" -h "${HOSTNAME}" "${IMAGENAME}"
   [ $? -eq 0 ] || die "${SERVICENAME} start failed."
}

#------------------------------------------------------------------------------------
# Stop the container. 

function serviceStop {
   ! container_running "${SERVICENAME}" || docker stop --time=30 "${SERVICENAME}" >/dev/null 2>&1
}

#------------------------------------------------------------------------------------
# Delete the container. 

function serviceDelete {
   ! container_exists "${SERVICENAME}"  || docker rm "${SERVICENAME}" >/dev/null 2>&1
}

#------------------------------------------------------------------------------------

# getUSERID IMAGENAME
# get the ID of the user running in a docker container.
function getUSERID {
   if [ -z "$1" ]; then die "getUSERID: requires IMAGENAME passed as first argument."; fi
   USERID=$(docker run --rm -it "${1}" /bin/bash -c "id -u | tr -d '\r\n'")
   GROUPID=$(docker run --rm -it "${1}" /bin/bash -c "id -g | tr -d '\r\n'")
   if [ $? -ne 0 ]; then die "getUSERID: Docker image ${1} does not exist." ; fi
}

#------------------------------------------------------------------------------------
# Load secrets from Vault
function dvaultLoad {
   [ ! -z "${2:-}" ] || die "dvaultLoad: requires PROJECT and VOLUME arguments"
   
   getUSERID "${IMAGENAME}"
   PROJECT="$1"
   SECRET_VOLUME="$(tr -d '/' <<< ${2})"
   
   dvault load "${PROJECT}" "drunner-${SERVICENAME}-${SECRET_VOLUME}" "${USERID}" "${GROUPID}"
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   if [ "$#" -eq 0 ]; then 
      die "servicerunner must have the install argument."
   fi

   COMMAND="${1}"
   COMMANDOPTS=("-i")

   case "$COMMAND" in 
   
          #--- standard (required) commands
   
         install)
            ;;
            
         obliterate)
            ;;
                     
         uninstall)
            ;;
                     
         backupstart)
            BACKUPPATH="$2"
            ;;
         
         backupend)
            BACKUPPATH="$2"
            ;;
         
         restore)
            RESTOREPATH="$2"
            ;;
         
         help)
            showhelp
            ;;
         
         enter)
            shift
            COMMANDOPTS=("-it")
            dockerrun /bin/bash "$@"
            ;;
         
         updatestart)
            ;;

         updateend)
            ;;
         
         selftest)
            ;;
            
         #--- custom commands

            
         #--- unrecognised commands

         *)
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"            
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
