#!/bin/bash
                                                                                                                                                          
#  ad88888ba                                        88                          88888888ba                                                                  
# d8"     "8b                                       ""                          88      "8b                                                                 
# Y8,                                                                           88      ,8P                                                                 
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          



#------------------------------------------------------------------------------------
# Initialisation of globals.

# bail if we try and use an unset var
set -o nounset

# Determine the current directory. There's stuff in there we want.
MYDIR=$( dirname "$(readlink -f "$0")" )

# read shell includes autogenerated by dRunner for us (it makes them when we're installed).
source "$MYDIR/variables.sh"
source "$MYDIR/utils.sh"

#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2
NAME
   ${SERVICENAME}
       
SYNOPSIS
   ${CODE_S}${SERVICENAME} help${CODE_E}
      This help.
   
   ${CODE_S}${SERVICENAME} create PROJECT_NAME PROJECT_PATH${CODE_E}
      Creates a template dService project in PROJECT_PATH.
   
   ${CODE_S}${SERVICENAME} setup${CODE_E}
      Run the configuration wizard.
   
   ${CODE_S}${SERVICENAME} mount${CODE_E}
      Mount host machine to this VM over samba.
   
DESCRIPTION
   Helpers for creating dService projects. Built from ${IMAGENAME}.
   
EOF
}

#------------------------------------------------------------------------------------
# Run a command in a temporary container. 

function dockerrun {
   local RVAL=0
   docker run "${COMMANDOPTS[@]}" --name="${SERVICENAME}-${COMMAND}" -h "${HOSTNAME}" "${DOCKEROPTS[@]}" "${IMAGENAME}" "$@"
   RVAL=$?
   docker rm "${SERVICENAME}-${COMMAND}" >/dev/null
   [ $RVAL -eq 0 ] || die "${SERVICENAME} ${COMMAND} failed."
}

#------------------------------------------------------------------------------------

# chownpath
# use:   chownpath PATH CMD   with path mapped to /s
# e.g.:  chownpath "$ROOTPATH/support" "chown -R $EUID:${GROUPS[0]} /s && chmod -R 0500 /s"
function chownpath {
   [ $# -eq 2 ] || die "chownpath called with incorrect number of arguments."
   local DPATH="$1"
   [ -d "$DPATH" ] || die "chownpath called with non-existant path $DPATH"
   # set ownership and permissions for those support files (don't rely on what's in the container).
   docker run --rm -v "$DPATH:/s" drunner/install-rootutils bash -c "$2" >/dev/null || die "chownpath command failed: $2"
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   if [ "$#" -eq 0 ]; then 
      die "servicerunner must have the install argument."
   fi

   COMMAND="${1}"
   COMMANDOPTS=("-i")

   case "$COMMAND" in 
   
          #--- standard (required) commands
   
         install)
            ;;
            
         obliterate)
            ;;
                     
         uninstall)
            ;;
                     
         backupstart)
            BACKUPPATH="$2"
            ;;
         
         backupend)
            BACKUPPATH="$2"
            ;;
         
         restore)
            RESTOREPATH="$2"
            ;;
         
         help)
            showhelp
            ;;
         
         enter)
            shift
            COMMANDOPTS=("-it")
            dockerrun /bin/bash "$@"
            ;;
         
         updatestart)
            ;;

         updateend)
            ;;
         
         selftest)
            ;;
            
         #--- custom commands
            
         create)
            local PROJECT_NAME=$2
            local PROJECT_PATH=$(realpath $3)
            
            # Create project directory
            mkdir -p ${PROJECT_PATH}

            # allow the container to write into this folder.
            chmod 0777 "${PROJECT_PATH}"
            
            # Copy out project files
            docker run --rm -it --user="$(id -u):$(id -g)" -v "${PROJECT_PATH}:/tempcopy" "${IMAGENAME}" /bin/bash -c "cp -r /project/. /tempcopy/"

            # Replace <<PROJECT_NAME>> with $PROJECT_NAME
            grep -rl "<<PROJECT_NAME>>" ${PROJECT_PATH} | xargs sed -i "s/<<PROJECT_NAME>>/${PROJECT_NAME}/g"
            
            # Set permissions on new files
            chownpath "${PROJECT_PATH}" "chown -R $EUID:${GROUPS[0]} /s && chmod -R 0644 /s"

           ;;
         
         setup)
            if [ "$(dpkg -l | grep cifs-utils | wc -l)" == "0" ]; then
               echo "${CODE_S}Installing cifs-utils...${CODE_E}"
               bash -c "sudo apt-get update && sudo apt-get install -y cifs-utils"
               echo "${CODE_S}Finished installing cifs-utils, resuming setup${CODE_E}"
               echo ""
            fi
            echo "${CODE_S}//////////////////////////////////////////////${CODE_E}"
            echo "${CODE_S}//              dRunner Setup               //${CODE_E}"
            echo "${CODE_S}//////////////////////////////////////////////${CODE_E}"
            COMMANDOPTS=("-it")
            dockerrun mount_setup
            bash -c "$(dockerrun setup_git)"
            echo ""
            echo "${CODE_S}Setup succeded${CODE_E}"
            ;;
         
         mount)
            bash -c "$(dockerrun mount_local)"
            ;;
            
         #--- unrecognised commands

         *)
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"            
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
